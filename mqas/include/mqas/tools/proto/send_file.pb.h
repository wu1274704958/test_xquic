// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: send_file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_send_5ffile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_send_5ffile_2eproto

#include <limits>
#include "mqas/macro.h"
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_send_5ffile_2eproto MQAS_EXTERN
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct MQAS_EXTERN TableStruct_send_5ffile_2eproto {
  static const uint32_t offsets[];
};
MQAS_EXTERN extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_send_5ffile_2eproto;
namespace mqas {
namespace tools {
namespace proto {
class ReqSendFile;
struct ReqSendFileDefaultTypeInternal;
MQAS_EXTERN extern ReqSendFileDefaultTypeInternal _ReqSendFile_default_instance_;
class SendFileMd5;
struct SendFileMd5DefaultTypeInternal;
MQAS_EXTERN extern SendFileMd5DefaultTypeInternal _SendFileMd5_default_instance_;
}  // namespace proto
}  // namespace tools
}  // namespace mqas
PROTOBUF_NAMESPACE_OPEN
template<> MQAS_EXTERN ::mqas::tools::proto::ReqSendFile* Arena::CreateMaybeMessage<::mqas::tools::proto::ReqSendFile>(Arena*);
template<> MQAS_EXTERN ::mqas::tools::proto::SendFileMd5* Arena::CreateMaybeMessage<::mqas::tools::proto::SendFileMd5>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mqas {
namespace tools {
namespace proto {

// ===================================================================

class MQAS_EXTERN ReqSendFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mqas.tools.proto.ReqSendFile) */ {
 public:
  inline ReqSendFile() : ReqSendFile(nullptr) {}
  ~ReqSendFile() override;
  explicit PROTOBUF_CONSTEXPR ReqSendFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSendFile(const ReqSendFile& from);
  ReqSendFile(ReqSendFile&& from) noexcept
    : ReqSendFile() {
    *this = ::std::move(from);
  }

  inline ReqSendFile& operator=(const ReqSendFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSendFile& operator=(ReqSendFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSendFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSendFile* internal_default_instance() {
    return reinterpret_cast<const ReqSendFile*>(
               &_ReqSendFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqSendFile& a, ReqSendFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSendFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSendFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqSendFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqSendFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqSendFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReqSendFile& from) {
    ReqSendFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSendFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mqas.tools.proto.ReqSendFile";
  }
  protected:
  explicit ReqSendFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 size = 2;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:mqas.tools.proto.ReqSendFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_send_5ffile_2eproto;
};
// -------------------------------------------------------------------

class MQAS_EXTERN SendFileMd5 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mqas.tools.proto.SendFileMd5) */ {
 public:
  inline SendFileMd5() : SendFileMd5(nullptr) {}
  ~SendFileMd5() override;
  explicit PROTOBUF_CONSTEXPR SendFileMd5(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendFileMd5(const SendFileMd5& from);
  SendFileMd5(SendFileMd5&& from) noexcept
    : SendFileMd5() {
    *this = ::std::move(from);
  }

  inline SendFileMd5& operator=(const SendFileMd5& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendFileMd5& operator=(SendFileMd5&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendFileMd5& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendFileMd5* internal_default_instance() {
    return reinterpret_cast<const SendFileMd5*>(
               &_SendFileMd5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendFileMd5& a, SendFileMd5& b) {
    a.Swap(&b);
  }
  inline void Swap(SendFileMd5* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendFileMd5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendFileMd5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendFileMd5>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendFileMd5& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendFileMd5& from) {
    SendFileMd5::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendFileMd5* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mqas.tools.proto.SendFileMd5";
  }
  protected:
  explicit SendFileMd5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMd5FieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes md5 = 2;
  void clear_md5();
  const std::string& md5() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_md5(ArgT0&& arg0, ArgT... args);
  std::string* mutable_md5();
  PROTOBUF_NODISCARD std::string* release_md5();
  void set_allocated_md5(std::string* md5);
  private:
  const std::string& _internal_md5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_md5(const std::string& value);
  std::string* _internal_mutable_md5();
  public:

  // @@protoc_insertion_point(class_scope:mqas.tools.proto.SendFileMd5)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_send_5ffile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqSendFile

// string name = 1;
inline void ReqSendFile::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ReqSendFile::name() const {
  // @@protoc_insertion_point(field_get:mqas.tools.proto.ReqSendFile.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSendFile::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mqas.tools.proto.ReqSendFile.name)
}
inline std::string* ReqSendFile::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mqas.tools.proto.ReqSendFile.name)
  return _s;
}
inline const std::string& ReqSendFile::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ReqSendFile::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReqSendFile::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReqSendFile::release_name() {
  // @@protoc_insertion_point(field_release:mqas.tools.proto.ReqSendFile.name)
  return _impl_.name_.Release();
}
inline void ReqSendFile::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mqas.tools.proto.ReqSendFile.name)
}

// uint64 size = 2;
inline void ReqSendFile::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t ReqSendFile::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t ReqSendFile::size() const {
  // @@protoc_insertion_point(field_get:mqas.tools.proto.ReqSendFile.size)
  return _internal_size();
}
inline void ReqSendFile::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void ReqSendFile::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:mqas.tools.proto.ReqSendFile.size)
}

// -------------------------------------------------------------------

// SendFileMd5

// string name = 1;
inline void SendFileMd5::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SendFileMd5::name() const {
  // @@protoc_insertion_point(field_get:mqas.tools.proto.SendFileMd5.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendFileMd5::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mqas.tools.proto.SendFileMd5.name)
}
inline std::string* SendFileMd5::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mqas.tools.proto.SendFileMd5.name)
  return _s;
}
inline const std::string& SendFileMd5::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SendFileMd5::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SendFileMd5::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SendFileMd5::release_name() {
  // @@protoc_insertion_point(field_release:mqas.tools.proto.SendFileMd5.name)
  return _impl_.name_.Release();
}
inline void SendFileMd5::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mqas.tools.proto.SendFileMd5.name)
}

// bytes md5 = 2;
inline void SendFileMd5::clear_md5() {
  _impl_.md5_.ClearToEmpty();
}
inline const std::string& SendFileMd5::md5() const {
  // @@protoc_insertion_point(field_get:mqas.tools.proto.SendFileMd5.md5)
  return _internal_md5();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendFileMd5::set_md5(ArgT0&& arg0, ArgT... args) {
 
 _impl_.md5_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mqas.tools.proto.SendFileMd5.md5)
}
inline std::string* SendFileMd5::mutable_md5() {
  std::string* _s = _internal_mutable_md5();
  // @@protoc_insertion_point(field_mutable:mqas.tools.proto.SendFileMd5.md5)
  return _s;
}
inline const std::string& SendFileMd5::_internal_md5() const {
  return _impl_.md5_.Get();
}
inline void SendFileMd5::_internal_set_md5(const std::string& value) {
  
  _impl_.md5_.Set(value, GetArenaForAllocation());
}
inline std::string* SendFileMd5::_internal_mutable_md5() {
  
  return _impl_.md5_.Mutable(GetArenaForAllocation());
}
inline std::string* SendFileMd5::release_md5() {
  // @@protoc_insertion_point(field_release:mqas.tools.proto.SendFileMd5.md5)
  return _impl_.md5_.Release();
}
inline void SendFileMd5::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    
  } else {
    
  }
  _impl_.md5_.SetAllocated(md5, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.md5_.IsDefault()) {
    _impl_.md5_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mqas.tools.proto.SendFileMd5.md5)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tools
}  // namespace mqas

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_send_5ffile_2eproto
